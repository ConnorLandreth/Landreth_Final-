subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Job Title", y = "Salary") +
annotate("text", x = 'Senior Project Engineer', y = 50000, label = "Mean compensation for top professions: $149,833", hjust = 1.1, vjust = 1.1, size = 4, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_plot.rds")
})
# Visualization for Two Numerical - multi with salary bins
output$ageExperiencePlot <- renderPlot({
SD$SalaryBins <- cut(SD$Salary,
breaks = c(0, 50000, 100000, 150000, Inf),
labels = c("0-49,999", "50,000-99,999", "100,000-149,999", "150,000+"),
include.lowest = TRUE)
gg <- ggplot(SD, aes(x = Age, y = Years.of.Experience, color = SalaryBins)) +
geom_point(size = 3) +
labs(title = "Age vs. Years of Experience",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Age", y = "Years of Experience", color = "Salary Range") +
scale_color_manual(values = color_palette)
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "age_experience_plot.rds")
})
# Adjusted Visualization for One Categorical Variable - uni
output$educationLevelPlot <- renderPlot({
data <- SD %>% filter(!is.na(Education.Level))
max_count <- max(table(SD$Education.Level))  # Calculate the maximum count
gg <- ggplot(data, aes(x = Education.Level)) +
geom_bar(fill = "turquoise4", color = "black") +
geom_text(stat = 'count', aes(label = ..count..), vjust = -1.5, color = "black") +  # Display count above bars
labs(title = "Distribution of Education Levels",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Education Level", y = "") +
ylim(0, max_count * 1.2) +  # Extend the y-axis to fit labels
annotate("text", x = "PhD", y = 2500, label = "45.1% of degree holders have a\nbachelor's degree", size = 3.25, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "education_level_plot.rds")
})
# Plotting the map with fill color based on average salary
output$salaryMapPlot <- renderPlot({
gg <- ggplot(merged_data, aes(x = long, y = lat, group = group, fill = average_salary)) +
geom_polygon(color = "white", size = 0.1) +
scale_fill_viridis() +
labs(title = "Average Salary by State",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
fill = "Average Salary") +
coord_map()
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_map_plot.rds")
})
})
}
# Running the app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
# Define color palette
color_palette <- c("0-49,999" = "purple4", "50,000-99,999" = "royalblue",
"100,000-149,999" = "turquoise4", "150,000+" = "yellow4")
# Define UI
ui <- fluidPage(
theme = shinytheme("journal"),
titlePanel("Corporate Careers Summary Dashboard (US)"),
tabsetPanel(
tabPanel("Salary Information",
fluidRow(
column(6, plotOutput("educationLevelPlot")),
column(6, plotOutput("salaryPlot"))
),
fluidRow(
column(12, plotOutput("ageExperiencePlot"))
)
),
tabPanel("Salary Map",
fluidRow(
column(12, plotOutput("salaryMapPlot", height = "800px"))
)
)
)
)
# Define server logic
server <- function(input, output, session) {
observe({
# Visualization for One Categorical & One Numerical - multi
output$salaryPlot <- renderPlot({
top_job_titles <- SD %>%
group_by(Job.Title) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
slice_head(n = 6) %>%
pull(Job.Title)
filtered_data <- SD %>%
filter(Job.Title %in% top_job_titles)
gg <- ggplot(filtered_data, aes(x = Job.Title, y = Salary)) +
geom_boxplot(fill = "turquoise4", color = "black") +
labs(title = "Salaries for Top 6 Job Titles",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Job Title", y = "Salary") +
annotate("text", x = 'Senior Project Engineer', y = 50000, label = "Mean compensation for top professions: $149,833", hjust = 1.1, vjust = 1.1, size = 4, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_plot.rds")
})
# Visualization for Two Numerical - multi with salary bins
output$ageExperiencePlot <- renderPlot({
SD$SalaryBins <- cut(SD$Salary,
breaks = c(0, 50000, 100000, 150000, Inf),
labels = c("0-49,999", "50,000-99,999", "100,000-149,999", "150,000+"),
include.lowest = TRUE)
gg <- ggplot(SD, aes(x = Age, y = Years.of.Experience, color = SalaryBins)) +
geom_point(size = 3) +
labs(title = "Age vs. Years of Experience",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Age", y = "Years of Experience", color = "Salary Range") +
scale_color_manual(values = color_palette)
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "age_experience_plot.rds")
})
# Adjusted Visualization for One Categorical Variable - uni
output$educationLevelPlot <- renderPlot({
data <- SD %>% filter(!is.na(Education.Level))
max_count <- max(table(SD$Education.Level))  # Calculate the maximum count
gg <- ggplot(data, aes(x = Education.Level)) +
geom_bar(fill = "turquoise4", color = "black") +
geom_text(stat = 'count', aes(label = ..count..), vjust = -1.5, color = "black") +  # Display count above bars
labs(title = "Distribution of Education Levels",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Education Level", y = "") +
ylim(0, max_count * 1.2) +  # Extend the y-axis to fit labels
annotate("text", x = "PhD", y = 2500, label = "45.1% of degree holders have a\nbachelor's degree", size = 3.25, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "education_level_plot.rds")
})
# Plotting the map with fill color based on average salary
output$salaryMapPlot <- renderPlot({
gg <- ggplot(merged_data, aes(x = long, y = lat, group = group, fill = average_salary)) +
geom_polygon(color = "white", size = 0.1) +
scale_fill_viridis() +
labs(title = "Average Salary by State",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
fill = "Average Salary") +
coord_map()
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_map_plot.rds")
})
})
}
# Running the app
shinyApp(ui = ui, server = server)
salary_plot <- readRDS("~/GitHub/Landreth_Final/salary_plot.rds")
education_level_plot <- readRDS("~/GitHub/Landreth_Final/education_level_plot.rds")
salary_map_plot <- readRDS("~/GitHub/Landreth_Final/salary_map_plot.rds")
age_experience_plot <- readRDS("~/GitHub/Landreth_Final/age_experience_plot.rds")
salary_plot <- readRDS("~/GitHub/Landreth_Final/salary_plot.rds")
salary_plot
education_level_plot <- readRDS("~/GitHub/Landreth_Final/education_level_plot.rds")
education_level_plot
salary_map_plot <- readRDS("~/GitHub/Landreth_Final/salary_map_plot.rds")
salary_map_plot
library(flexdashboard)
# Load plots
salary_plot <- readRDS("~/GitHub/Landreth_Final/salary_plot.rds")
education_level_plot <- readRDS("~/GitHub/Landreth_Final/education_level_plot.rds")
age_experience_plot <- readRDS("~/GitHub/Landreth_Final/age_experience_plot.rds")
salary_map_plot <- readRDS("~/GitHub/Landreth_Final/salary_map_plot.rds")
salary_plot
education_level_plot
age_experience_plot
salary_map_plot
library(flexdashboard)
# Load plots
salary_plot <- readRDS("~/GitHub/Landreth_Final/salary_plot.rds")
education_level_plot <- readRDS("~/GitHub/Landreth_Final/education_level_plot.rds")
age_experience_plot <- readRDS("~/GitHub/Landreth_Final/age_experience_plot.rds")
salary_map_plot <- readRDS("~/GitHub/Landreth_Final/salary_map_plot.rds")
salary_plot
education_level_plot
age_experience_plot
salary_map_plot
knitr::opts_chunk$set(echo = TRUE, fig.width=12, fig.height=8)
library(shiny)
library(ggplot2)
library(dplyr)
library(shinythemes)
# Define color palette
color_palette <- c("0-49,999" = "purple4", "50,000-99,999" = "royalblue",
"100,000-149,999" = "turquoise4", "150,000+" = "yellow4")
# Define UI
ui <- fluidPage(
theme = shinytheme("journal"),
titlePanel("Corporate Careers Summary Dashboard (US)"),
tabsetPanel(
tabPanel("Salary Information",
fluidRow(
column(6, plotOutput("educationLevelPlot")),
column(6, plotOutput("salaryPlot"))
),
fluidRow(
column(12, plotOutput("ageExperiencePlot"))
)
),
tabPanel("Salary Map",
fluidRow(
column(12, plotOutput("salaryMapPlot", height = "800px"))
)
)
)
)
# Define server logic
server <- function(input, output, session) {
observe({
# Visualization for One Categorical & One Numerical - multi
output$salaryPlot <- renderPlot({
top_job_titles <- SD %>%
group_by(Job.Title) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
slice_head(n = 6) %>%
pull(Job.Title)
filtered_data <- SD %>%
filter(Job.Title %in% top_job_titles)
gg <- ggplot(filtered_data, aes(x = Job.Title, y = Salary)) +
geom_boxplot(fill = "turquoise4", color = "black") +
labs(title = "Salaries for Top 6 Job Titles",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Job Title", y = "Salary") +
annotate("text", x = 'Senior Project Engineer', y = 50000, label = "Mean compensation\n for top professions:\n $149,833", hjust = 1.1, vjust = 1.1, size = 3, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_plot.rds")
})
# Visualization for Two Numerical - multi with salary bins
output$ageExperiencePlot <- renderPlot({
SD$SalaryBins <- cut(SD$Salary,
breaks = c(0, 50000, 100000, 150000, Inf),
labels = c("0-49,999", "50,000-99,999", "100,000-149,999", "150,000+"),
include.lowest = TRUE)
gg <- ggplot(SD, aes(x = Age, y = Years.of.Experience, color = SalaryBins)) +
geom_point(size = 3) +
labs(title = "Age vs. Years of Experience",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Age", y = "Years of Experience", color = "Salary Range") +
scale_color_manual(values = color_palette)
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "age_experience_plot.rds")
})
# Adjusted Visualization for One Categorical Variable - uni
output$educationLevelPlot <- renderPlot({
data <- SD %>% filter(!is.na(Education.Level))
max_count <- max(table(SD$Education.Level))  # Calculate the maximum count
gg <- ggplot(data, aes(x = Education.Level)) +
geom_bar(fill = "turquoise4", color = "black") +
geom_text(stat = 'count', aes(label = ..count..), vjust = -1.5, color = "black") +  # Display count above bars
labs(title = "Distribution of Education Levels",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Education Level", y = "") +
ylim(0, max_count * 1.2) +  # Extend the y-axis to fit labels
annotate("text", x = "PhD", y = 2500, label = "45.1% of degree\n holders have a\nbachelor's degree", size = 3, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "education_level_plot.rds")
})
# Plotting the map with fill color based on average salary
output$salaryMapPlot <- renderPlot({
gg <- ggplot(merged_data, aes(x = long, y = lat, group = group, fill = average_salary)) +
geom_polygon(color = "white", size = 0.1) +
scale_fill_viridis() +
labs(title = "Average Salary by State",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
fill = "Average Salary") +
coord_map()
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_map_plot.rds")
})
})
}
# Running the app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(shinythemes)
# Define color palette
color_palette <- c("0-49,999" = "purple4", "50,000-99,999" = "royalblue",
"100,000-149,999" = "turquoise4", "150,000+" = "yellow4")
# Define UI
ui <- fluidPage(
theme = shinytheme("journal"),
titlePanel("Corporate Careers Summary Dashboard (US)"),
tabsetPanel(
tabPanel("Salary Information",
fluidRow(
column(6, plotOutput("educationLevelPlot")),
column(6, plotOutput("salaryPlot"))
),
fluidRow(
column(12, plotOutput("ageExperiencePlot"))
)
),
tabPanel("Salary Map",
fluidRow(
column(12, plotOutput("salaryMapPlot", height = "800px"))
)
)
)
)
# Define server logic
server <- function(input, output, session) {
observe({
# Visualization for One Categorical & One Numerical - multi
output$salaryPlot <- renderPlot({
top_job_titles <- SD %>%
group_by(Job.Title) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
slice_head(n = 6) %>%
pull(Job.Title)
filtered_data <- SD %>%
filter(Job.Title %in% top_job_titles)
gg <- ggplot(filtered_data, aes(x = reorder(Job.Title, -Salary), y = Salary)) +
geom_boxplot(fill = "turquoise4", color = "black") +
labs(title = "Salaries for Top 6 Job Titles",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Job Title", y = "Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text = element_text(face = "bold")) +
annotate("text", x = 'Senior Project Engineer', y = 50000, label = "Mean compensation for top professions: $149,833", hjust = 1.1, vjust = 1.1, size = 4, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_plot.rds")
})
# Visualization for Two Numerical - multi with salary bins
output$ageExperiencePlot <- renderPlot({
SD$SalaryBins <- cut(SD$Salary,
breaks = c(0, 50000, 100000, 150000, Inf),
labels = c("0-49,999", "50,000-99,999", "100,000-149,999", "150,000+"),
include.lowest = TRUE)
gg <- ggplot(SD, aes(x = Age, y = Years.of.Experience, color = SalaryBins)) +
geom_point(size = 3) +
labs(title = "Age vs. Years of Experience",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Age", y = "Years of Experience", color = "Salary Range") +
scale_color_manual(values = color_palette)
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "age_experience_plot.rds")
})
# Adjusted Visualization for One Categorical Variable - uni
output$educationLevelPlot <- renderPlot({
data <- SD %>% filter(!is.na(Education.Level))
max_count <- max(table(SD$Education.Level))  # Calculate the maximum count
gg <- ggplot(data, aes(x = Education.Level)) +
geom_bar(fill = "turquoise4", color = "black") +
geom_text(stat = 'count', aes(label = ..count..), vjust = -1.5, color = "black") +  # Display count above bars
labs(title = "Distribution of Education Levels",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Education Level", y = "") +
ylim(0, max_count * 1.2) +  # Extend the y-axis to fit labels
annotate("text", x = "PhD", y = 2500, label = "45.1% of degree\n holders have a\nbachelor's degree", size = 3, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "education_level_plot.rds")
})
# Plotting the map with fill color based on average salary
output$salaryMapPlot <- renderPlot({
gg <- ggplot(merged_data, aes(x = long, y = lat, group = group, fill = average_salary)) +
geom_polygon(color = "white", size = 0.1) +
scale_fill_viridis() +
labs(title = "Average Salary by State",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
fill = "Average Salary") +
coord_map()
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_map_plot.rds")
})
})
}
# Running the app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
library(shinythemes)
# Define color palette
color_palette <- c("0-49,999" = "purple4", "50,000-99,999" = "royalblue",
"100,000-149,999" = "turquoise4", "150,000+" = "yellow4")
# Define UI
ui <- fluidPage(
theme = shinytheme("journal"),
titlePanel("Corporate Careers Summary Dashboard (US)"),
tabsetPanel(
tabPanel("Salary Information",
fluidRow(
column(6, plotOutput("educationLevelPlot")),
column(6, plotOutput("salaryPlot"))
),
fluidRow(
column(12, plotOutput("ageExperiencePlot"))
)
),
tabPanel("Salary Map",
fluidRow(
column(12, plotOutput("salaryMapPlot", height = "800px"))
)
)
)
)
# Define server logic
server <- function(input, output, session) {
observe({
# Visualization for One Categorical & One Numerical - multi
output$salaryPlot <- renderPlot({
top_job_titles <- SD %>%
group_by(Job.Title) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
slice_head(n = 6) %>%
pull(Job.Title)
filtered_data <- SD %>%
filter(Job.Title %in% top_job_titles)
gg <- ggplot(filtered_data, aes(x = reorder(Job.Title, -Salary), y = Salary)) +
geom_boxplot(fill = "turquoise4", color = "black") +
labs(title = "Salaries for Top 6 Job Titles",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Job Title", y = "Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text = element_text(face = "bold")) +
annotate("text", x = 'Senior Project Engineer', y = 50000, label = "Mean compensation\n for top professions:\n $149,833", hjust = 1.1, vjust = 1.1, size = 3, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_plot.rds")
})
# Visualization for Two Numerical - multi with salary bins
output$ageExperiencePlot <- renderPlot({
SD$SalaryBins <- cut(SD$Salary,
breaks = c(0, 50000, 100000, 150000, Inf),
labels = c("0-49,999", "50,000-99,999", "100,000-149,999", "150,000+"),
include.lowest = TRUE)
gg <- ggplot(SD, aes(x = Age, y = Years.of.Experience, color = SalaryBins)) +
geom_point(size = 3) +
labs(title = "Age vs. Years of Experience",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Age", y = "Years of Experience", color = "Salary Range") +
scale_color_manual(values = color_palette)
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "age_experience_plot.rds")
})
# Adjusted Visualization for One Categorical Variable - uni
output$educationLevelPlot <- renderPlot({
data <- SD %>% filter(!is.na(Education.Level))
max_count <- max(table(SD$Education.Level))  # Calculate the maximum count
gg <- ggplot(data, aes(x = Education.Level)) +
geom_bar(fill = "turquoise4", color = "black") +
geom_text(stat = 'count', aes(label = ..count..), vjust = -1.5, color = "black") +  # Display count above bars
labs(title = "Distribution of Education Levels",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
x = "Education Level", y = "") +
ylim(0, max_count * 1.2) +  # Extend the y-axis to fit labels
annotate("text", x = "PhD", y = 2500, label = "45.1% of degree\n holders have a\nbachelor's degree", size = 3, colour = "red")
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "education_level_plot.rds")
})
# Plotting the map with fill color based on average salary
output$salaryMapPlot <- renderPlot({
gg <- ggplot(merged_data, aes(x = long, y = lat, group = group, fill = average_salary)) +
geom_polygon(color = "white", size = 0.1) +
scale_fill_viridis() +
labs(title = "Average Salary by State",
subtitle = "United States, 2022",
caption = "Source: Kaggle",
fill = "Average Salary") +
coord_map()
print(gg) # Print ggplot object
# Save the plot as an RDS file
saveRDS(gg, "salary_map_plot.rds")
})
})
}
# Running the app
shinyApp(ui = ui, server = server)
